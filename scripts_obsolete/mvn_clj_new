#!/bin/bash

function printUsage() {
    SCRIPT_NAME=`basename $0`
    echo "Usage: $SCRIPT_NAME PROJECT_NAME"
}

function createPom() {
    PROJECT_NAME=$1
    cat   << EOF > pom.xml
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- MAVEN TEMPLATE FOR CLOJURE -->

  <modelVersion>4.0.0</modelVersion>

  <groupId>$PROJECT_NAME</groupId>
  <artifactId>$PROJECT_NAME</artifactId>
  <version>$PROJECT_NAME</version>

  <!-- Optional stuff -->

  <!--
  <name>sorcery</name>
  <url>http://maven.apache.org</url>

  <description>
    TODO
  </description>
  -->  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>  

  <!-- REPOSITORIES SECTION -->

  <repositories>
    <repository>
      <id>Clojure Releases</id>
      <url>http://build.clojure.org/releases</url>
    </repository>
    <repository>
      <id>Clojars</id>
      <url>http://clojars.org/repo</url>
    </repository>
  </repositories>

  <!-- DEPENDENCIES SECTION -->
  
  <dependencies>

    <!-- JAVA dependencies -->

    <!-- For convenient repl -->    
    <dependency>
      <groupId>jline</groupId>
      <artifactId>jline</artifactId>
      <version>0.9.94</version>
    </dependency>

    <!-- CLOJURE dependencies -->

    <dependency>
      <groupId>org.clojure</groupId>
      <artifactId>clojure</artifactId>
      <version>1.4.0</version>
    </dependency>

    <!-- CLOJURE DOCS dependencies -->

    <dependency>         
     <groupId>marginalia</groupId>       
     <artifactId>marginalia</artifactId>       
     <version>0.7.1</version>     
    </dependency>         
    
    <dependency>       
      <groupId>autodoc</groupId>       
      <artifactId>autodoc</artifactId>       
      <version>0.9.0</version>     
    </dependency>

  </dependencies>
    <build>
      <plugins>
      <plugin>
        <groupId>com.theoryinpractise</groupId>
        <artifactId>clojure-maven-plugin</artifactId>
        <version>1.3.9</version>
    
        <executions>

          <execution>
            <id>clojure-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <execution>
            <id>clojure-test</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>

        </executions>

        <configuration>
          <replScript>src/scripts/maven-repl.clj</replScript>
          <script>src/scripts/maven-run.clj</script>
          <temporaryOutputDirectory>false</temporaryOutputDirectory>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.3.1</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>$PROJECT_NAME.core</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <archive>
            <manifest>
              <mainClass>$PROJECT_NAME.core</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
EOF
}

function createMavenRepl() {
    PROJECT_NAME=$1
    cat <<EOF > maven-repl.clj 
(println "Launched src/scripts/maven-repl.clj script...")   
EOF
}

function createMavenRun() {
    PROJECT_NAME=$1
    cat <<EOF > maven-run.clj 
(use '(tmt core))

(-main)
EOF
}

function createCoreClj() {
    PROJECT_NAME=$1
    cat <<EOF > core.clj
(ns $PROJECT_NAME.core
  (:gen-class))

(defn hello []
  "Hello world !!!")

(defn -main [& args]
  (println (hello)))
EOF
}

function createTestCoreClj() {
    PROJECT_NAME=$1
    cat <<EOF > core.clj 
(ns $PROJECT_NAME.test.core
  (:use clojure.test)
  (:use $PROJECT_NAME.core))

(deftest test-simple
  (is (= 1 1)))
EOF
}

function createEmacsDirLocals() {
    cat <<EOF > ./.dir-locals.el
((clojure-mode . ((inferior-lisp-program . "emvn clojure:repl"))))
EOF
}

function createGitIgnore() {
    cat <<EOF > ./.gitignore
/target
EOF
}

if [ $# != 1 ]; then
    printUsage
    exit 1
fi

if [ -e $1 ]; then
    echo "$1 exists!"
    exit 1
fi

PROJECT_NAME=$1
SCRIPTS_SRC_DIR=src/main/scripts
CLOJURE_SRC_DIR=src/main/clojure/$PROJECT_NAME
CLOJURE_TST_DIR=src/test/clojure/$PROJECT_NAME/test

mkdir $PROJECT_NAME
cd $PROJECT_NAME

# Creat pom + dot files 

createPom $PROJECT_NAME
createGitIgnore
createEmacsDirLocals

PROJECT_DIR=`pwd`

# Fill scripts sources

mkdir -p $SCRIPTS_SRC_DIR
cd $SCRIPTS_SRC_DIR
createMavenRepl $PROJECT_NAME
createMavenRun $PROJECT_NAME
cd $PROJECT_DIR

# Fill CLOJURE sources

mkdir -p $CLOJURE_SRC_DIR
cd  $CLOJURE_SRC_DIR
createCoreClj $PROJECT_NAME
cd $PROJECT_DIR

# Fill CLOJURE TESTS

mkdir -p $CLOJURE_TST_DIR
cd $CLOJURE_TST_DIR
createTestCoreClj $PROJECT_NAME

# Create empty JAVA dirs

mkdir -p src/main/java
mkdir -p src/test/java

